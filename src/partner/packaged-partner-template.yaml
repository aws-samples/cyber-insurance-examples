AWSTemplateFormatVersion: 2010-09-09
Resources:
  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Sub: cyber-insurance-quote-website-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: index.html
        Enabled: true
        Origins:
        - DomainName:
            Fn::GetAtt:
            - WebsiteS3Bucket
            - DomainName
          Id: S3Origin
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOAI}
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
    DependsOn: CloudFrontOAI
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          Fn::Sub: OAI for ${AWS::AccountId}
  WebsiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebsiteS3Bucket
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Principal:
            CanonicalUser:
              Fn::GetAtt:
              - CloudFrontOAI
              - S3CanonicalUserId
          Resource:
            Fn::Sub: arn:aws:s3:::${WebsiteS3Bucket}/*
    DependsOn: WebsiteS3Bucket
  SecurityHubFindingsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Sub: cyber-insurance-quote-security-hub-findings-${AWS::AccountId}
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CyberInsuranceQuote
      AttributeDefinitions:
      - AttributeName: accountId
        AttributeType: S
      - AttributeName: type
        AttributeType: S
      KeySchema:
      - AttributeName: accountId
        KeyType: HASH
      - AttributeName: type
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  StoreAccountDetails:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: StoreAccountDetails
      Description: Store AWS account details in DynamoDB
      Runtime: python3.11
      Code:
        S3Bucket: deployment-bucket-cyberinsurance-demo
        S3Key: 12be39dbef9a9b82b955366c38216e10
      Handler: handler.lambda_handler
      Timeout: 30
      Role:
        Fn::GetAtt:
        - StoreAccountDetailsLambdaExecutionRole
        - Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN:
            Ref: SnsTopic
          USER_TEMPLATE_BUCKET_NAME:
            Ref: WebsiteS3Bucket
          PARTNER_ROLE_NAME:
            Ref: CreateQuoteLambdaExecutionRole
          PARTNER_ACCOUNT_ID:
            Ref: AWS::AccountId
          CLOUDFRONT_URL:
            Fn::GetAtt:
            - CloudFrontDistribution
            - DomainName
          DYNAMODB_TABLE_NAME:
            Ref: DynamoDBTable
    DependsOn: StoreAccountDetailsLambdaExecutionRole
  StoreAccountDetailsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: StoreAccountDetailsLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            Resource:
              Fn::GetAtt:
              - DynamoDBTable
              - Arn
      - PolicyName: IAMUpdatePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - iam:PutRolePolicy
            Resource:
              Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/CreateQuoteLambdaExecutionRole
      - PolicyName: S3BucketPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:PutBucketPolicy
            - s3:GetBucketPolicy
            Resource:
              Fn::Sub: arn:aws:s3:::cyber-insurance-quote-website-${AWS::AccountId}
      - PolicyName: SNSPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - sns:GetTopicAttributes
            - sns:SetTopicAttributes
            Resource:
              Ref: SnsTopic
  StoreAccountDetailsInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: StoreAccountDetails
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*
  CreateQuote:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateQuote
      Description: Get Security Hub findings and create a quote
      Runtime: python3.11
      Code:
        S3Bucket: deployment-bucket-cyberinsurance-demo
        S3Key: fa86febdf6222cb8ccf12b5d07dec5ca
      Handler: handler.lambda_handler
      Timeout: 300
      Role:
        Fn::GetAtt:
        - CreateQuoteLambdaExecutionRole
        - Arn
      Environment:
        Variables:
          SECURITYHUB_FINDINGS_BUCKET:
            Ref: SecurityHubFindingsBucket
          DYNAMODB_TABLE_NAME:
            Ref: DynamoDBTable
  CreateQuoteLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CreateQuoteLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            Resource:
              Fn::GetAtt:
              - DynamoDBTable
              - Arn
      - PolicyName: S3Policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${SecurityHubFindingsBucket}/*
  CreateQuoteInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: CreateQuote
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: SnsTopic
  CheckQuoteStatus:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CheckQuoteStatus
      Description: Check quote status
      Runtime: python3.11
      Code:
        S3Bucket: deployment-bucket-cyberinsurance-demo
        S3Key: 45f53e6cda181ad2051a0d8ae9bdd0a6
      Handler: handler.lambda_handler
      Timeout: 30
      Role:
        Fn::GetAtt:
        - CreateQuoteLambdaExecutionRole
        - Arn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME:
            Ref: DynamoDBTable
          CLOUDFRONT_URL:
            Fn::GetAtt:
            - CloudFrontDistribution
            - DomainName
          SECURITYHUB_FINDINGS_BUCKET:
            Ref: SecurityHubFindingsBucket
  CheckQuoteStatusLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CheckQuoteStatusLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            Resource:
              Fn::GetAtt:
              - DynamoDBTable
              - Arn
      - PolicyName: S3Policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
              Fn::Sub: arn:aws:s3:::${SecurityHubFindingsBucket}/*
  CheckQuoteStatusInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: CheckQuoteStatus
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CyberInsuranceQuoteTopic
  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
        - CreateQuote
        - Arn
      Protocol: lambda
      TopicArn:
        Ref: SnsTopic
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: CyberInsuranceQuoteApi
      Description: Cyber Insurance Quote API
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ApiGateway
    DependsOn:
    - ApiGatewayOPTIONS
    - ApiGatewayAccountPOST
    - ApiGatewayAccountOPTIONS
    - ApiGatewayQuotePOST
    - ApiGatewayQuoteOPTIONS
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: ApiGateway
      DeploymentId:
        Ref: ApiGatewayDeployment
      StageName: Prod
  ApiGatewayOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Fn::GetAtt:
        - ApiGateway
        - RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 204
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 204
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  ApiGatewayAccountResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: ApiGateway
      ParentId:
        Fn::GetAtt:
        - ApiGateway
        - RootResourceId
      PathPart: account
  ApiGatewayAccountOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: ApiGatewayAccountResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 204
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 204
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  ApiGatewayAccountPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: ApiGatewayAccountResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreAccountDetails.Arn}/invocations
        PassthroughBehavior: WHEN_NO_TEMPLATES
    DependsOn: StoreAccountDetailsInvoke
  ApiGatewayQuoteResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: ApiGateway
      ParentId:
        Fn::GetAtt:
        - ApiGateway
        - RootResourceId
      PathPart: quote
  ApiGatewayQuoteOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: ApiGatewayQuoteResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 204
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 204
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  ApiGatewayQuotePOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: ApiGatewayQuoteResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckQuoteStatus.Arn}/invocations
        PassthroughBehavior: WHEN_NO_TEMPLATES
    DependsOn: CheckQuoteStatusInvoke
Outputs:
  WebsiteURL:
    Description: Website URL
    Value:
      Fn::GetAtt:
      - CloudFrontDistribution
      - DomainName
    Export:
      Name: WebsiteURL
  SNSTopicARN:
    Description: SNS Topic ARN
    Value:
      Ref: SnsTopic
    Export:
      Name: SNSTopicARN
  WebsiteBucketName:
    Description: Website Bucket Name
    Value:
      Ref: WebsiteS3Bucket
    Export:
      Name: WebsiteBucketName
  SecurityHubFindingsBucketName:
    Description: Security Hub Findings Bucket Name
    Value:
      Ref: SecurityHubFindingsBucket
    Export:
      Name: SecurityHubFindingsBucketName
  ApiGatewayURL:
    Description: API Gateway URL
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}
    Export:
      Name: ApiGatewayURL
